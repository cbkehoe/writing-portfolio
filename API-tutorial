
# Tutorial: Calling a REST API in an Express App
**Chris Kehoe - cbkehoe22@gmail.com**  
**July 10, 2025**

## Contents
1. [Introduction](#1-introduction)  
2. [Install Node.js](#2-install-nodejs)  
3. [Set Up Your Application with Express](#3-set-up-your-application-with-express)  
4. [Set Up The Middleware](#4-set-up-the-middleware)  
5. [Connecting To An External Data Source](#5-connecting-to-an-external-data-source)  
6. [Make A Rest API Call](#6-make-a-rest-api-call)  
7. [Conclusion](#7-conclusion)  

## 1. Introduction
Welcome to my tutorial on calling a REST API within an Express application. This tutorial was built with XML and LaTeX.  
While there are several ways to implement an API call in an app, this tutorial will focus on making a simple endpoint call to an API using Node.js in an Express framework and coded in Visual Studio Code.

## 2. Install Node.js
To install Node.js, download the file package from their website: [nodejs.org/en/download](https://nodejs.org/en/download).  
Once the download is finished, open the file and install it using the recommended settings.  
Now that you have installed the Node.js package, you can create an application to call a REST API.

## 3. Set Up Your Application with Express
To begin, let’s create an Express app. Open a computer terminal and input the following commands:

```bash
$ mkdir ExpressAPICall  
$ cd ExpressAPICall  
$ npm init -y
```

The `-y` flag automatically accepts the application's default settings.  
Once initialized, install Express with:

```bash
$ npm install --save express
```

## 4. Set Up The Middleware
Open the project in Visual Studio Code. Create a file named `index.js` and enter:

```js
const express = require('express');  
const app = express();  
const port = 3000;  

app.get('/', (req, res) => res.send('Skynet is Online'))  
app.listen(3000, port)
```

Run the app with:

```bash
$ node index.js
```

Go to `localhost:3000/` in your browser. If you see *Skynet is Online*, the app is working. Use `ctrl + c` in the terminal to stop the server.

## 5. Connecting To An External Data Source
Install the request module:

```bash
$ npm install --save request
```

Create a file `restCall.js` with the following code:

```js
const request = require("request");

module.exports = {
  call_API: function (url) {
    return new Promise((resolve, reject) => {
      request(url, { json: true }, (err, res, body) => {
        if (err) reject(err);
        resolve(body);
      });
    });
  },
};
```

In `index.js`, require the new module:

```js
const restCall = require("./restCall");
```

## 6. Make A REST API Call
Update your `index.js`:

```js
const express = require('express');  
const restCall = require("./restCall");  
const app = express();  
const port = 3000;  

app.get("/", (req, res) => {
  restCall
    .call_API("https://jsonplaceholder.typicode.com/todos/")
    .then((response) => {
      res.json(response);
    })
    .catch((error) => {
      res.send(error);
    });
});

app.listen(3000, port)
```

Restart your server, visit `localhost:3000/`, and you’ll see the JSON response from the API.

## 7. Conclusion
This approach to making REST API calls can be adapted to work with a wide range of APIs. To retrieve specific types of data, consult the API’s documentation to identify the available endpoints and required parameters.
